in page
    Contents
    Featured content
    Current events
    Random article
    Donate to Wikipedia
    Wikipedia store

Interaction

    Help
    About Wikipedia
    Community portal
    Recent changes
    Contact page

Tools

    What links here
    Related changes
    Upload file
    Special pages
    Permanent link
    Page information
    Wikidata item
    Cite this page

Print/export

    Create a book
    Download as PDF
    Printable version

Languages

    Čeština
    فارسی
    עברית
    Polski
    Português
    Русский
    Simple English
    Српски / srpski

Edit links

    This page was last modified on 23 October 2015, at 08:39.
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Developers
    Mobile view
POST (HTTP)
From Wikipedia, the free encyclopedia
HTTP

    Persistence Compression HTTPS 

Request methods

    OPTIONS GET HEAD POST PUT DELETE TRACE CONNECT PATCH 

Header fields

    Cookie ETag Location HTTP referer DNT X-Forwarded-For 

Status codes

    301 Moved Permanently 302 Found 303 See Other 403 Forbidden 404 Not Found 451 Unavailable For Legal Reasons 

    v t e 

In computing, POST is one of many request methods supported by the HTTP protocol used by the World Wide Web. By design, the POST request method requests that a web server accepts and stores the data enclosed in the body of the request message.[1] It is often used when uploading a file or submitting a completed web form.

In contrast, the HTTP GET request method is designed to retrieve information from the server. As part of a GET request, some data can be passed within the URL's query string, specifying for example search terms, date ranges, or other information that defines the query. As part of a POST request, an arbitrary amount of data of any type can be sent to the server in the body of the request message. A header field in the POST request usually indicates the message body's Internet media type.

Contents

    1 Posting data
    2 Use for submitting web forms
    3 Affecting server state
    4 See also
    5 References
    6 External links

Posting data

The World Wide Web and HTTP are based on a number of request methods or 'verbs', including POST and GET as well as PUT, DELETE, and several others. Web browsers normally use only GET and POST, but RESTful online apps make use of many of the others. POST's place in the range of HTTP methods is to send a representation of a new data entity to the server so that it will be stored as a new subordinate of the resource identified by the URI.[1] For example, for the URI http://example.com/customers, POST requests might be expected to represent new customers, each including their name, address, contact details and so on. Early website designers strayed away from this original concept in two important ways. First, there is no technical reason for a URI textually to describe the web resource subordinate to which POST data will be stored. In fact, unless some effort is made, the last part of a URI will more likely describe the web application's processing page and its technology, such as http://example.com/applicationform.php. Secondly, given most web browsers' natural limitation to use only GET or POST, designers felt the need to re-purpose POST to do many other data submission and data management tasks, including the alteration of existing records and their deletion.

Efforts by some influential writers to remedy the first point began as early as 1998.[2] Web application frameworks such as Ruby on Rails and others make it easier for designers to provide their users with semantic URLs. With regard to the second point, it is possible to use client-side scripting, or to write standalone apps, to make use of the other HTTP methods where they are relevant,[3] but outside of this most web forms that submit or alter server data continue to use POST for the purpose.

That is not to say that every web form should specify method="post" in its opening tag. Many forms are used to specify more precisely the retrieval of information from the server, without any intention of altering the main database. Search forms, for example, are ideally suited to having method="get" specified.[4]

There are times when HTTP GET is less suitable even for data retrieval. An example of this is when a great deal of data would need to be specified in the URL. Browsers and web servers can have limits on the length of the URL that they will handle without truncation or error. Percent-encoding of reserved characters in URLs and query strings can significantly increase their length, and while Apache HTTP Server can handle up to 4,000 characters in a URL,[5] Microsoft Internet Explorer is limited to 2048 characters in any URL.[6] Equally, HTTP GET should not be used where sensitive information, such as user names and passwords, have to be submitted along with other data for the request to complete. Even if HTTPS is used, preventing the data from being intercepted in transit, the browser history and the web server's logs will likely contain the full URL in plaintext, which may be exposed if either system is hacked. In these cases, HTTP POST should be used.[7]
Use for submitting web forms

When a web browser sends a POST request from a web form element, the default Internet media type is "application/x-www-form-urlencoded".[8] This is a format for encoding key-value pairs with possibly duplicate keys. Each key-value pair is separated by an '&' character, and each key is separated from its value by an '=' character. Keys and values are both escaped by replacing spaces with the '+' character and then using URL encoding on all other non-alphanumeric[9] characters.

For example, the key-value pairs

Name: Gareth Wylie
Age: 24
Formula: a + b == 13%!

are encoded as

Name=Gareth+Wylie&Age=24&Formula=a+%2B+b+%3D%3D+13%25%21

Starting with HTML 4.0, forms can also submit data in multipart/form-data as defined in RFC 2388 (See also RFC 1867 for an earlier experimental version defined as an extension to HTML 2.0 and mentioned in HTML 3.2).

The special case of a POST to the same page that the form belongs to, is known as a postback.
Affecting server state

Per RFC 7231, the POST method should be used when a request is non-idempotent: that is, when it should change the server state each time it is performed, for example submitting a comment to a blog post or voting in an online poll. GET is defined to be nullipotent, with no side-effects, and idempotent operations have "no side effects on second or future requests".[10][11] For this reason, web crawlers such as search engine indexers normally use the GET and HEAD methods exclusively, to prevent their automated requests from performing such actions.

However, there are reasons why POST is used even for idempotent requests, notably if the request uses is very long, due to restrictions on URLs – the query string in the GET method may become very long, especially due to percent-encoding.[10]
See also

    Postback

References

"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content". Retrieved 2014-07-24. "The POST method requests that the target resource process the representation enclosed in the request according to the resource's own specific semantics."
Berners-Lee, Tim (1998). "Cool URIs don't change". W3C. Retrieved 17 October 2012.
Friedman, Mike (2009). "Using HTTP PUT and DELETE methods in web applications". Retrieved 17 October 2012.
"Form submission". HTML 4.01 Specification. W3C. 1999. Retrieved 17 October 2012.
Rigsby, Dan (2008). "REST and Max URL Size". Retrieved 17 October 2012.
"Maximum URL length is 2,048 characters in Internet Explorer". Microsoft.
"Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content". RFC 7231. Retrieved 2014-07-25.
Berners-Lee, Tim; Connolly, Dan (22 September 1995). "Hypertext Markup Language - 2.0 - Forms". World Wide Web Consortium. Retrieved 15 January 2011.
"Forms in HTML documents".
Korpela, Jukka (28 September 2003). "Methods GET and POST in HTML forms - what's the difference?". Tampere University of Technology. Retrieved 15 January 2011.

    RFC 7231, 4.2.1 Safe Methods

External links

    Straightforward definition of POST
    POST verb in HTTP specification
    URIs, Addressability, and the use of HTTP GET and POST

Categories:

    Hypertext Transfer Protocol

Navigation menu

    Create account
    Not logged in
    Talk
    Contributions
    Log in

    Article
    Talk

    Read
    Edit
    View history

    Main page
    Contents
    Featured content
    Current events
    Random article
    Donate to Wikipedia
    Wikipedia store

Interaction

    Help
    About Wikipedia
    Community portal
    Recent changes
    Contact page

Tools

    What links here
    Related changes
    Upload file
    Special pages
    Permanent link
    Page information
    Wikidata item
    Cite this page

Print/export

    Create a book
    Download as PDF
    Printable version

Languages

    Čeština
    فارسی
    עברית
    Polski
    Português
    Русский
    Simple English
    Српски / srpski

Edit links

    This page was last modified on 23 October 2015, at 08:39.
    Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Developers
    Mobile view
"
